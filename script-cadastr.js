

// –ß–µ–∫–∞—î–º–æ, –ø–æ–∫–∏ –∑–∞–≤–∞–Ω—Ç–∞–∂–∞—Ç—å—Å—è Pbf —ñ VectorTile
(async function () {
    window.Pbf = (await import("https://cdn.skypack.dev/pbf")).default;
    window.VectorTile = (await import("https://cdn.skypack.dev/@mapbox/vector-tile")).VectorTile;

    console.log("‚úÖ –ë—ñ–±–ª—ñ–æ—Ç–µ–∫–∏ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ!");
})();

// –û–±—Ä–æ–±–Ω–∏–∫ –∫–ª—ñ–∫—É –ø—Ä–∞–≤–æ—é –∫–Ω–æ–ø–∫–æ—é
let cadastralLayer = null; // –ì–ª–æ–±–∞–ª—å–Ω–∞ –∑–º—ñ–Ω–Ω–∞ –¥–ª—è –ø–æ–ª—ñ–≥–æ–Ω—ñ–≤

document.addEventListener("DOMContentLoaded", () => {
    map.on("contextmenu", async function (e) {
        const { lat, lng } = e.latlng;
        console.log(`üìç –ö–ª—ñ–∫: ${lat}, ${lng}`);

        // –ö–æ–Ω–≤–µ—Ä—Ç—É—î–º–æ –≤ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∏ —Ç–∞–π–ª—É
        const zoom = 15;
        const x = Math.floor((lng + 180) / 360 * Math.pow(2, zoom));
        const y = Math.floor((1 - Math.log(Math.tan(lat * Math.PI / 180) + 1 / Math.cos(lat * Math.PI / 180)) / Math.PI) / 2 * Math.pow(2, zoom));

        console.log(`üó∫Ô∏è –¢–∞–π–ª: (${x}, ${y}) –Ω–∞ —Ä—ñ–≤–Ω—ñ ${zoom}`);

        // –§–æ—Ä–º—É—î–º–æ URL –∑–∞–ø–∏—Ç—É –¥–æ –∫–∞–¥–∞—Å—Ç—Ä—É
        const url = `https://cdn.kadastr.live/tiles/maps/kadastr/${zoom}/${x}/${y}.pbf`;

        try {
            const response = await fetch(url);
            if (!response.ok) throw new Error(`–ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è: ${response.status}`);

            const arrayBuffer = await response.arrayBuffer();
            console.log("‚úÖ MVT —Ç–∞–π–ª –æ—Ç—Ä–∏–º–∞–Ω–æ!", arrayBuffer);

            // –î–µ–∫–æ–¥—É—î–º–æ PBF (Vector Tile)
            const tile = new VectorTile(new Pbf(arrayBuffer));

            // –ü–µ—Ä–µ—Ç–≤–æ—Ä—é—î–º–æ –≤ GeoJSON
            const features = [];
            for (let layerName in tile.layers) {
                let layer = tile.layers[layerName];
                for (let i = 0; i < layer.length; i++) {
                    let feature = layer.feature(i).toGeoJSON(x, y, zoom);
                    features.push(feature);
                }
            }

            const geoJsonData = {
                type: "FeatureCollection",
                features: features
            };

            console.log("üõ∞Ô∏è –û—Ç—Ä–∏–º–∞–Ω—ñ –¥–∞–Ω—ñ —É —Ñ–æ—Ä–º–∞—Ç—ñ GeoJSON:", JSON.stringify(geoJsonData, null, 2));

            // ‚ùå –í–∏–¥–∞–ª—è—î–º–æ –ø–æ–ø–µ—Ä–µ–¥–Ω—ñ–π —à–∞—Ä –ø–µ—Ä–µ–¥ –¥–æ–¥–∞–≤–∞–Ω–Ω—è–º –Ω–æ–≤–æ–≥–æ
            if (cadastralLayer) {
                map.removeLayer(cadastralLayer);
            }

            // –î–æ–¥–∞—î–º–æ –Ω–æ–≤–∏–π —à–∞—Ä –ø–æ–ª—ñ–≥–æ–Ω—ñ–≤
            cadastralLayer = L.geoJSON(geoJsonData, {
                style: {
                    color: "red",
                    weight: 2,
                    fillColor: "rgba(255,0,0,0.3)",
                    fillOpacity: 0.5
                },
                onEachFeature: function (feature, layer) {
                    // –î–æ–¥–∞—î–º–æ popup –∑ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—î—é –ø—Ä–∏ –∫–ª—ñ–∫—É
                    layer.on("click", function (e) {
                        L.popup()
                            .setLatLng(e.latlng)
                            .setContent(`<b>–Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ –¥—ñ–ª—è–Ω–∫—É:</b><br>${JSON.stringify(feature.properties, null, 2)}`)
                            .openOn(map);
                    });
                }
            }).addTo(map);

        } catch (error) {
            console.error("‚ùå –ü–æ–º–∏–ª–∫–∞:", error);
        }
    });
});

