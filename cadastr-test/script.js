// –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É—î–º–æ –∫–∞—Ä—Ç—É
const map = L.map("map").setView([49.807405, 23.931917], 16);

// –î–æ–¥–∞—î–º–æ –±–∞–∑–æ–≤–∏–π —à–∞—Ä OpenStreetMap
L.tileLayer("https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png", {
    attribution: '&copy; <a href="https://www.openstreetmap.org/copyright">OSM</a> contributors'
}).addTo(map);

// –ß–µ–∫–∞—î–º–æ, –ø–æ–∫–∏ –∑–∞–≤–∞–Ω—Ç–∞–∂–∞—Ç—å—Å—è Pbf —ñ VectorTile
(async function () {
    window.Pbf = (await import("https://cdn.skypack.dev/pbf")).default;
    window.VectorTile = (await import("https://cdn.skypack.dev/@mapbox/vector-tile")).VectorTile;

    console.log("‚úÖ –ë—ñ–±–ª—ñ–æ—Ç–µ–∫–∏ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ!");
})();

// –û–±—Ä–æ–±–Ω–∏–∫ –∫–ª—ñ–∫—É –ø—Ä–∞–≤–æ—é –∫–Ω–æ–ø–∫–æ—é
map.on("contextmenu", async function (e) {
    const { lat, lng } = e.latlng;
    console.log(`üìç –ö–ª—ñ–∫: ${lat}, ${lng}`);

    const zoom = 16;
    const x = Math.floor((lng + 180) / 360 * Math.pow(2, zoom));
    const y = Math.floor((1 - Math.log(Math.tan(lat * Math.PI / 180) + 1 / Math.cos(lat * Math.PI / 180)) / Math.PI) / 2 * Math.pow(2, zoom));

    console.log(`üó∫Ô∏è –¢–∞–π–ª: (${x}, ${y}) –Ω–∞ —Ä—ñ–≤–Ω—ñ ${zoom}`);

    const url = `https://cdn.kadastr.live/tiles/maps/kadastr/${zoom}/${x}/${y}.pbf`;

    try {
        const response = await fetch(url);
        if (!response.ok) throw new Error(`–ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è: ${response.status}`);

        const arrayBuffer = await response.arrayBuffer();
        console.log("‚úÖ MVT —Ç–∞–π–ª –æ—Ç—Ä–∏–º–∞–Ω–æ!", arrayBuffer);

        // –ß–µ–∫–∞—î–º–æ, –ø–æ–∫–∏ –±—ñ–±–ª—ñ–æ—Ç–µ–∫–∏ –∑–∞–≤–∞–Ω—Ç–∞–∂–∞—Ç—å—Å—è
        while (!window.VectorTile || !window.Pbf) {
            await new Promise(res => setTimeout(res, 100));
        }

        // –î–µ–∫–æ–¥—É—î–º–æ PBF (Vector Tile)
        const tile = new VectorTile(new Pbf(arrayBuffer));

        // –ü–µ—Ä–µ—Ç–≤–æ—Ä—é—î–º–æ –≤ GeoJSON
        const features = [];
        for (let layerName in tile.layers) {
            let layer = tile.layers[layerName];
            for (let i = 0; i < layer.length; i++) {
                let feature = layer.feature(i).toGeoJSON(x, y, zoom);
                features.push(feature);
            }
        }

        const geoJsonData = {
            type: "FeatureCollection",
            features: features
        };

        // üëâ –õ–û–ì–£–Ñ–ú–û –û–¢–†–ò–ú–ê–ù–Ü –î–ê–ù–Ü
        console.log("üõ∞Ô∏è –û—Ç—Ä–∏–º–∞–Ω—ñ –¥–∞–Ω—ñ —É —Ñ–æ—Ä–º–∞—Ç—ñ GeoJSON:", JSON.stringify(geoJsonData, null, 2));

        // –î–æ–¥–∞—î–º–æ –ø–æ–ª—ñ–≥–æ–Ω–∏ –Ω–∞ –∫–∞—Ä—Ç—É (—è–∫—â–æ –≤–æ–Ω–∏ —î)
        if (geoJsonData.features.length > 0) {
            L.geoJSON(geoJsonData, {
                style: {
                    color: "red",
                    weight: 2,
                    fillColor: "rgba(255,0,0,0.3)",
                    fillOpacity: 0.5
                }
            }).addTo(map);
        } else {
            console.log("‚ö†Ô∏è –ù–µ–º–∞—î –ø–æ–ª—ñ–≥–æ–Ω—ñ–≤ –¥–ª—è –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è.");
        }

    } catch (error) {
        console.error("‚ùå –ü–æ–º–∏–ª–∫–∞:", error);
    }
});
